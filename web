package cartonspider.test.com.cartonspider;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.GeolocationPermissions;
import android.webkit.JavascriptInterface;
import android.webkit.JsResult;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebStorage;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.TextView;

import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

import cartonspider.test.com.Bean.CartonBean;
import okhttp3.Call;
import okhttp3.FormBody;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.Response;

public class GrabCatetoryActivity extends Activity {


    WebView mWebView;
    int Currentid=1,Currentepisode=0,limitindex=0;
    String curl,uid;
    private ArrayList<String> urls=new ArrayList<>();
    private ArrayList<String> episodenames=new ArrayList<>();
    private ArrayList<CartonBean> cartonBeans=new ArrayList<>();
    private TextView text,start,from,to;

    private WebChromeClient mChromeClient = new WebChromeClient() {

        private View myView = null;
        private CustomViewCallback myCallback = null;


        @Override
        public void onGeolocationPermissionsShowPrompt(String origin,
                                                       GeolocationPermissions.Callback callback) {
            callback.invoke(origin, true, false);
            super.onGeolocationPermissionsShowPrompt(origin, callback);
        }

        @Override
        public void onExceededDatabaseQuota(String url,
                                            String databaseIdentifier, long currentQuota,
                                            long estimatedSize, long totalUsedQuota,
                                            WebStorage.QuotaUpdater quotaUpdater) {

            quotaUpdater.updateQuota(estimatedSize * 2);
        }

        @Override
        public void onReachedMaxAppCacheSize(long spaceNeeded,
                                             long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {

            quotaUpdater.updateQuota(spaceNeeded * 2);
        }

        @Override
        public void onShowCustomView(View view, CustomViewCallback callback) {
            if (myCallback != null) {
                myCallback.onCustomViewHidden();
                myCallback = null;
                return;
            }

            ViewGroup parent = (ViewGroup) mWebView.getParent();
            parent.removeView(mWebView);
            parent.addView(view);
            myView = view;
            myCallback = callback;
            mChromeClient = this;
        }

        @Override
        public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
            result.cancel();
            return true;
        }

        @Override
        public void onHideCustomView() {
            if (myView != null) {
                if (myCallback != null) {
                    myCallback.onCustomViewHidden();
                    myCallback = null;
                }

                ViewGroup parent = (ViewGroup) myView.getParent();
                parent.removeView(myView);
                parent.addView(mWebView);
                myView = null;
            }
        }

        @Override
        public void onProgressChanged(WebView view, int newProgress) {
            // TODO 自动生成的方法存根


        }
    };
    private WebViewClient webViewClient=new WebViewClient(){

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            return false;
        }

        @Override
        public void onPageStarted(WebView view, String url, Bitmap favicon) {
            super.onPageStarted(view, url, favicon);
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            Log.e("onPageFinished",url);
            view.loadUrl("javascript:window.java_obj.getSource('<head>'+" +
                    "document.getElementsByTagName('html')[0].innerHTML+'</head>');");
            super.onPageFinished(view, url);
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        from=findViewById(R.id.from);
        to=findViewById(R.id.to);
        text=findViewById(R.id.text);
        start=findViewById(R.id.start);
        start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(TextUtils.isDigitsOnly(from.getText().toString()) && TextUtils.isDigitsOnly(to.getText().toString()))
                {
                    limitindex=Integer.valueOf(to.getText().toString());
                    getProcessData(from.getText().toString());
                }
                else
                {
                    getProcessData();
                }
            }
        });
        Permission.getPermission(this);
        mWebView=findViewById(R.id.webview);
        mWebView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);//设置js可以直接打开窗口，如window.open()，默认为false
        mWebView.getSettings().setJavaScriptEnabled(true);//是否允许执行js，默认为false。设置true时，会提醒可能造成XSS漏洞
        mWebView.getSettings().setSupportZoom(true);//是否可以缩放，默认true
        mWebView.getSettings().setBuiltInZoomControls(true);//是否显示缩放按钮，默认false
        mWebView.getSettings().setUseWideViewPort(true);//设置此属性，可任意比例缩放。大视图模式
        mWebView.getSettings().setLoadWithOverviewMode(true);//和setUseWideViewPort(true)一起解决网页自适应问题
        mWebView.getSettings().setAppCacheEnabled(true);//是否使用缓存
        mWebView.getSettings().setDomStorageEnabled(true);//DOM Storage
        mWebView.addJavascriptInterface(new GrabCatetoryActivity.InJavaScriptLocalObj(), "java_obj");

        mWebView.setWebChromeClient(mChromeClient);
        mWebView.setWebViewClient(webViewClient);




    }

    final class InJavaScriptLocalObj {
        @JavascriptInterface
        public void getSource(String html) {
            episodenames.clear();
            //https://xcg123.herokuapp.com/series/show/49DF6279998B3A8D78B8769C070C3A1F
            Document document=Jsoup.parse(html);

            Elements elements= document.select("ul.mdc-image-list li");
            Log.e("PrintData ","elements:  "+elements.size()+"");
            if(elements.size()==0)
            {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        mWebView.loadUrl(curl);
                    }
                });
            }
            else
            {
                for (int i = 0; i < elements.size(); i++) {
                    String name=elements.get(i).select("span.mdc-button__label").html();
                    episodenames.add(name);
                }
                RequestDetail();
            }

        }
    }

    public static String getRootpath()
    {
        String root_path= Environment.getExternalStorageDirectory().getPath();
        if (root_path == null || root_path.equalsIgnoreCase("")) {
            List<String> lResult = new ArrayList<String>();
            try {
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec("mount");
                InputStream is = proc.getInputStream();
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.contains("extSdCard")) {
                        String[] arr = line.split(" ");
                        String path = arr[1];
                        File file = new File(path);
                        if (file.isDirectory()) {
                            lResult.add(path);
                        }
                    }
                }
                isr.close();
            } catch (Exception e) {
            }

            if (lResult.size() > 0)
                root_path = lResult.get(0);
            else {
                Log.e("错误","没手机卡");
                return null;
            }
        }
        return root_path;
    }

    private void getProcessData(String ...id)
    {
        RequestBody requestBody=null;

        if(id!=null && id.length>0)
        {
            requestBody=new MultipartBody.Builder() .setType(MultipartBody.FORM).addFormDataPart("id",id[0]).build();
        }
        cartonBeans.clear();
        episodenames.clear();
        OkHttpUtils.PostWithBaseUrl(OkHttpUtils.getprocess,requestBody,new RequestCallBack(){
            @Override
            public void OnRequestSuccess(Call call, Response response) {
                super.OnRequestSuccess(call, response);
                try {
                    String data=response.body().string();
                    JSONObject jsonObject=new JSONObject(data);
                    if(jsonObject.optString("status","").equalsIgnoreCase("000000"))
                    {
                        JSONObject datas= jsonObject.optJSONObject("datas");
                        Currentid=datas.optInt("id",1);
                        curl=datas.optString("url","");
                        uid=datas.optString("uid","");

                        geturls();
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                mWebView.loadUrl(curl);
                                text.setText("正在请求:  "+curl);
                            }
                        });
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }

            @Override
            public void onRequestFailure(Call call, IOException e) {
                super.onRequestFailure(call, e);

            }
        });
    }


    public void geturls()
    {
        //https://xcg123.herokuapp.com/series/show
        urls.clear();
        final RequestBody requestBody=null;
        OkHttpUtils.Get("https://xcg123.herokuapp.com/series/show/"+uid,null,new RequestCallBack(){
            @Override
            public void OnRequestSuccess(Call call, Response response) {
                super.OnRequestSuccess(call, response);
                try {
                    String data=response.body().string();
                    JSONObject jsonObject=new JSONObject(data);
                    if(jsonObject.optString("Code","").equalsIgnoreCase("200"))
                    {
                        JSONArray array=jsonObject.optJSONObject("Data").optJSONArray("Chapters");

                        for (int i = 0; i <array.length() ; i++) {
                            urls.add(uid+"/"+array.optJSONObject(i).optString("Id",""));
                        }
                        Log.e("PrintData ","urls:  "+urls.size()+"");
                        RequestDetail();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }

            @Override
            public void onRequestFailure(Call call, IOException e) {
                super.onRequestFailure(call, e);
            }
        });
    }

    private void RequestDetail()
    {
        if(urls.size()==episodenames.size())
        {

            Intent intent=new Intent(this,GrabDetailActivity.class);
            intent.putExtra("url",urls.get(Currentepisode));
            intent.putExtra("index",Currentepisode);
            intent.putExtra("from",from.getText().toString());
            intent.putExtra("to",to.getText().toString());
            startActivityForResult(intent,123);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode==123 && resultCode==456 && data!=null)
        {
            ArrayList<String> strings=data.getStringArrayListExtra("data");
            CartonBean bean=new CartonBean();
            bean.setEpisodename(episodenames.get(Currentepisode));
            bean.setEpisodeurl(urls.get(Currentepisode));
            bean.setStrings(strings);
            cartonBeans.add(bean);

            Currentepisode++;
            if(Currentepisode<urls.size())
            {
                RequestDetail();
            }
            else
            {
                //compelete
                CommitData();
                return;
            }


        }
    }


    private void CommitData()
    {
        RequestBody requestBody=new MultipartBody.Builder() .setType(MultipartBody.FORM)
                .addFormDataPart("id",Currentid+"").addFormDataPart("jsonarray",new Gson().toJson(cartonBeans)).build();
        OkHttpUtils.PostWithBaseUrl(OkHttpUtils.CommitCartonData,requestBody,new RequestCallBack(){
            @Override
            public void OnRequestSuccess(Call call, Response response) {
                super.OnRequestSuccess(call, response);
                try {
                    String data=response.body().string();
                    JSONObject jsonObject=new JSONObject(data);
                    if(jsonObject.optString("status","").equalsIgnoreCase("000000"))
                    {

                        Currentid++;
                        Currentepisode=0;
                        if(Currentid<limitindex)
                        {
                            getProcessData(Currentid+"");
                        }

                        Log.e("PrintData","完成");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onRequestFailure(Call call, IOException e) {
                super.onRequestFailure(call, e);
            }
        });
        }
}
